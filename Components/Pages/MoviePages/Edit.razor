@page "/Movies/edit"
@inject MovieRankingBlazor.Data.ApplicationDbContext DB
@using Azure.Storage.Blobs.Models
@using Microsoft.AspNetCore.Authorization
@using MovieRankingBlazor.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@using Azure.Storage.Blobs;


<PageTitle>Edit movie</PageTitle>

<h1>Edit movie</h1>

@if (Movie is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <EditForm method="post" Model="Movie" OnValidSubmit="UpdateMovie" FormName="edit" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <input type="hidden" name="Movie.Id" value="@Movie.Id" />
                        <div class="mb-3">
                            <label for="title" class="form-label">Title:</label>
                            <InputText id="title" @bind-Value="Movie.Title" class="form-control" />
                            <ValidationMessage For="() => Movie.Title" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description:</label>
                            <InputText id="description" @bind-Value="Movie.Description" class="form-control" />
                            <ValidationMessage For="() => Movie.Description" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="releasedate" class="form-label">ReleaseDate:</label>
                            <InputDate id="releasedate" @bind-Value="Movie.ReleaseDate" class="form-control" />
                            <ValidationMessage For="() => Movie.ReleaseDate" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="rate" class="form-label">Rate:</label>
                            <InputNumber id="rate" @bind-Value="Movie.Rate" class="form-control" min="1" max="10" step="0.5" />
                            <ValidationMessage For="() => Movie.Rate" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="imageurl" class="form-label">Image URL:</label>
                            <InputText id="imageurl" @bind-Value="Movie.ImageUrl" class="form-control" />
                            <ValidationMessage For="() => Movie.ImageUrl" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="imageFile" class="form-label">Movie Image:</label>
                            <InputFile OnChange="UploadFile" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<div>
    <a href="/movies" class="btn btn-secondary mt-3">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }


    [SupplyParameterFromForm]
    public Movie? Movie { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Movie ??= await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (Movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateMovie()
    {
        if (Movie.Rate.HasValue && Movie.Rate.Value > 0)
        {
            Movie.NumberOfReviews = 1;
        }
        else
        {
            Movie.Rate = null;
            Movie.NumberOfReviews = 0;
        }

        DB.Attach(Movie!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MovieExists(Movie!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/movies");
    }

    bool MovieExists(int id)
    {
        return DB.Movie.Any(e => e.Id == id);
    }

    private IBrowserFile? uploadedFile;


    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            //var blobServiceClient = new BlobServiceClient(connectionString);
            //var blobContainerClient = blobServiceClient.GetBlobContainerClient("nazwa-kontenera");
           //var blobClient = blobContainerClient.GetBlobClient(file.Name);

            await using var stream = file.OpenReadStream(maxAllowedSize: 10485760);
            //await blobClient.UploadAsync(stream, new BlobHttpHeaders { ContentType = file.ContentType });
           // Movie.ImageUrl = blobClient.Uri.ToString();
        }
    }


}
